#include <iostream>
#include <vector>
#include <algorithm>
#define FOR(i,a,b) for(int i=a;i<=b;i++)
#define pb push_back
using namespace std;
vector<int> graph[10001];
void dfs(int node,bool *visited, int &count){
  visited[node] =true;
  count++;
  if(graph[node].size()>0){
    FOR(i,0,graph[node].size()-1){
      if(!visited[graph[node][i]]){
	dfs(graph[node][i],visited,count);
      }
    }
  }
    
}
int main(){
  int N,P;
  cin>>N>>P;
  FOR(i,0,P-1){
    int src,dest;
    cin>>src>>dest;
    graph[src].pb(dest);
    graph[dest].pb(src);
  }
  bool visited[N+1];
  FOR(i,0,N){
    visited[i] = false;
  }
  int count=0;
  vector<int> numppl;
  FOR(i,0,N-1){
    if(!visited[i]){
      count = 0;
      dfs(i,visited,count);
      numppl.pb(count);
    }
  }
  long int result = 0;
  if(numppl.size()>1){
    FOR(i,0,numppl.size()-2){
      FOR(j,i+1,numppl.size()-1){
	result += (numppl[i]*numppl[j]);
      }
    }
  }
  cout<<result<<endl;
  return 0;
}
