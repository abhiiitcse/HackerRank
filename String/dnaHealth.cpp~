#include <iostream>
#include <vector>
#include <algorithm>
#include <queue>
#define FOR(i,a,b) for(int i=a;i<b;i++)
#define MAXC 26
#define MAXS 500
using namespace std;
int g[MAXS][MAXC];
int out[MAXS];
int f[MAXS];

int findNextState(int currstate, char nextInput){
  int answer = currstate;
  int ch = nextInput - 'a';
  while(g[answer][ch]==-1){
    answer = f[answer];
  }
  return g[answer][ch];
}


int buildMatchingMachine(string arr[], int k){
  memset(g,-1,sizeof(g));
  FOR(i,0,MAXS){
    FOR(j,0,MAXC){
      g[i][j] = -1;
    }
  }
  memset(out,0,sizeof(out));
  FOR(i,0,MAXS){
    out[i] = 0;
  }
  int states = 1;
  FOR(i,0,k){
    const string &word = arr[i];
    int currentstate = 0;
    FOR(j,0,word.size()){
      int ch = word[j]-'a';
      if(g[currentstate][ch]==-1){
	g[currentstate][ch] = states++;
      }
      currentstate = g[currentstate][ch];
    }
    out[currentstate] |= (1<<i);
  }
  FOR(i,0,MAXC){
    if(g[0][i]==-1){
      g[0][i] = 0;
    }
  }
  memset(f,-1,sizeof(f));
  FOR(i,0,MAXS){
    f[i] = -1;
  }
  queue<int> q;
  FOR(ch,0,MAXC){
    if(g[0][ch]!=0){
      f[g[0][ch]] = 0;
      q.push(g[0][ch]);
    }
  }
  while(!q.empty()){
    int state = q.front();
    q.pop();
    FOR(ch,0,MAXC){
      if(g[state][ch]!=-1){
	int failure = f[state];
	while(g[failure][ch]==-1){
	  failure = f[failure];
	}
	failure = g[failure][ch];
	f[g[state][ch]] = failure;
	out[g[state][ch]] |= out[failure];
	q.push(g[state][ch]);
      }
    }
  }
  return states;
  
}

void searchWords(string arr[], int k, string text){
  buildMatchingMachine(arr,k);
  int currentState = 0;
  FOR(i,0,text.size()){
    currentState = findNextState(currentState,text[i]);
    if(out[currentState]==0){
      continue;
    }
    FOR(j,0,k){
      if(out[currentState] & (1<<j)){
	cout<<arr[j]<<" -> ("<<(i-arr[j].size()+1)<<","<<i<<")"<<endl;
      }
    }
  }
}

int main(){
  string arr[] = {"he", "she", "hers", "his"};
  string text = "ahishers";
  int k = sizeof(arr)/sizeof(arr[0]);
  searchWords(arr, 4, text);
  return 0;
}
